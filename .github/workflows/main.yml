name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      deploy_gateway:  #spring-petclinic-api-gateway
        type: boolean
        default: false
      deploy_customers:  #spring-petclinic-customer-service
        type: boolean
        default: false
      deploy_vets:  #spring-petclinic-vets-service
        type: boolean
        default: false
      deploy_visits:  #spring-petclinic-visits-service
        type: boolean
        default: false
      deploy_discovery:  #spring-petclinic-discovery-server
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # TEST + BUILD ONLY SELECTED SERVICES
    - name: Test & build selected services
      run: |
        if [ "${{ inputs.deploy_gateway }}" == "true" ]; then
          cd spring-petclinic-api-gateway && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_customers }}" == "true" ]; then
          cd spring-petclinic-customers-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_vets }}" == "true" ]; then
          cd spring-petclinic-vets-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_visits }}" == "true" ]; then
          cd spring-petclinic-visits-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_discovery }}" == "true" ]; then
          cd spring-petclinic-discovery-server && mvn test && mvn package -DskipTests && cd ..
        fi

    # COPY SELECTED FILES
    - name: Upload selected JARs to EC2
      run: |
        mkdir upload
        if [ "${{ inputs.deploy_gateway }}" == "true" ]; then
          cp spring-petclinic-api-gateway/target/*.jar upload/gateway.jar
        fi
        if [ "${{ inputs.deploy_customers }}" == "true" ]; then
          cp spring-petclinic-customers-service/target/*.jar upload/customers.jar
        fi
        if [ "${{ inputs.deploy_vets }}" == "true" ]; then
          cp spring-petclinic-vets-service/target/*.jar upload/vets.jar
        fi
        if [ "${{ inputs.deploy_visits }}" == "true" ]; then
          cp spring-petclinic-visits-service/target/*.jar upload/visits.jar
        fi
        if [ "${{ inputs.deploy_discovery }}" == "true" ]; then
          cp spring-petclinic-discovery-server/target/*.jar upload/discovery.jar
        fi

    - name: SCP to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        source: upload/*
        target: ~/microservices/upload

    # RUN SERVICES
    - name: 🚀 SSH and Restart Updated Services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        script: |
          echo "🚀 Connected to EC2"
          cd ~/microservices

          mkdir -p Backup

          echo "📂 Listing JARs in Updated/"
          ls -l Updated || echo "No JARs found"

          timestamp=$(date +"%Y-%m-%d_%H-%M")

          for filepath in upload/*.jar; do
            [ -e "$filepath" ] || continue

            filename=$(basename "$filepath")
            servicename="${filename%.jar}"
            fulljar="~/microservices/${filename}"

            echo "🔁 Restarting service: $servicename"

            pid=$(pgrep -f "$fulljar")
            if [ -n "$pid" ]; then
              echo "🛑 Stopping $servicename (PID: $pid)"
              kill "$pid"
              sleep 2
            fi

            if [ -f "$filename" ]; then
              echo "📦 Backing up old ${filename}"
              mv "$filename" "Backup/${servicename}-${timestamp}.jar"
            fi

            echo "📤 Moving updated jar to microservices root"
            mv "upload/${filename}" "${filename}"

            echo "🚀 Starting ${filename}"
            nohup java -jar "${filename}" > "${servicename}.log" 2>&1 &

            echo "✅ $servicename restarted"
          done

          echo "🧹 Cleaning Updated folder"
          rm -rf upload/*
