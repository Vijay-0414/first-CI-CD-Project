name: Build and Push Docker image to ECR

on:
  workflow_dispatch:
    inputs:
      deploy_gateway:  #spring-petclinic-api-gateway
        type: boolean
        default: false
      deploy_customers:  #spring-petclinic-customer-service
        type: boolean
        default: false
      deploy_vets:  #spring-petclinic-vets-service
        type: boolean
        default: false
      deploy_visits:  #spring-petclinic-visits-service
        type: boolean
        default: false
      deploy_discovery:  #spring-petclinic-discovery-server
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: Micro-cluster

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}

    # TEST + BUILD ONLY SELECTED SERVICES
    - name: Test & build selected services
      run: |
        if [ "${{ inputs.deploy_gateway }}" == "true" ]; then
          cd spring-petclinic-api-gateway && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_customers }}" == "true" ]; then
          cd spring-petclinic-customers-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_vets }}" == "true" ]; then
          cd spring-petclinic-vets-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_visits }}" == "true" ]; then
          cd spring-petclinic-visits-service && mvn test && mvn package -DskipTests && cd ..
        fi
        if [ "${{ inputs.deploy_discovery }}" == "true" ]; then
          cd spring-petclinic-discovery-server && mvn test && mvn package -DskipTests && cd ..
        fi

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{secrets.AWS_REGION}}
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
          
    - name: Build and Push Docker Images
      run: |  
        build_push() {
          local SERVICE=$1
          local SERVICE_PATH=$2
          docker build -t ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} $SERVICE_PATH
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }}
          docker tag ${{ secrets.ECR_REGISTRY }}/$SERVICE:${{ env.COMMIT_SHORT_SHA }} ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest
          docker push ${{ secrets.ECR_REGISTRY }}/$SERVICE:latest        
        }

        if [ "${{ inputs.deploy_gateway }}" == "true" ]; then
          build_push api-gateway spring-petclinic-api-gateway
        fi
        if [ "${{ inputs.deploy_customers }}" == "true" ]; then
          build_push customers-service spring-petclinic-customers-service
        fi
        if [ "${{ inputs.deploy_vets }}" == "true" ]; then
          build_push vets-service spring-petclinic-vets-service
        fi
        if [ "${{ inputs.deploy_visits }}" == "true" ]; then
          build_push visits-service spring-petclinic-visits-service
        fi
        if [ "${{ inputs.deploy_discovery }}" == "true" ]; then
          build_push discovery-server spring-petclinic-discovery-server
        fi        

    - name: Create ECS cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --region ${{secrets.AWS_REGION}} --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")
        
        if [ "$CLUSTER_EXISTS" = "MISSING" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ] || [ "$CLUSTER_EXISTS" = "None" ]; then
          echo "$CLUSTER_NAME Cluster not found. Creating $CLUSTER_NAME ECS cluster..."
          aws ecs create-cluster --cluster-name $CLUSTER_NAME --region ${{secrets.AWS_REGION}}
        else
          echo "ECS cluster '$CLUSTER_NAME' already exists."
        fi

    - name: Launch EC2 instances if none exist
      run: |
        COUNT=$(aws ecs list-container-instances --cluster $CLUSTER_NAME --region ${{secrets.AWS_REGION}} --query "length(containerInstanceArns)" --output text)
        if [ "$COUNT" -eq 0 ]; then
          echo "Launching EC2 container instance..."
          AMI_ID=$(aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id --query "Parameters[0].Value" --output text)
          aws ec2 run-instances \
            --image-id $AMI_ID \
            --count 1 \
            --instance-type t3.medium \
            --iam-instance-profile Name=ecsInstanceRole \
            --key-name my-key \
            --security-group-ids sg-0abb4251606ddb157 \
            --subnet-id subnet-02cad20bf83afac11 \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=Micro-Instance}]" \
            --user-data "#!/bin/bash
            echo ECS_CLUSTER=$CLUSTER_NAME >> /etc/ecs/ecs.config"
        else
          echo "EC2 container instances already running."
        fi

    - name: Deploy Services
      run: |
        deploy_service() {
          local SERVICE_NAME=$1
          local TASK_NAME=$2
          local IMAGE=$3
          local DEF_FILE=$4

          echo "Deploying $SERVICE_NAME using image $IMAGE"

          sed "s|REPLACE_ME|$IMAGE|g" ecs-task-definitions/$DEF_FILE > final-task-def.json
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          # Keep only last 3 revisions
          OLD_REVISIONS=$(aws ecs list-task-definitions --family-prefix $TASK_NAME --status ACTIVE --sort DESC --query 'taskDefinitionArns[1:]' --output text)
          for TD_ARN in $OLD_REVISIONS; do
            aws ecs deregister-task-definition --task-definition $TD_ARN
          done

          SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text 2>/dev/null || echo "MISSING")

          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Service exists. Checking for running tasks..."
            TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text)

            if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "null" ]; then
              echo "Stopping task: $TASK_ARN"
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN
            else
              echo "No running tasks found for service."
            fi
          else
            echo "Creating ECS service..."
            aws ecs create-service --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --task-definition $TASK_DEF_ARN --desired-count 1 --launch-type EC2 --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
          fi

          echo "Updating Service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEF_ARN --force-new-deployment

        }

        if [ "${{ inputs.deploy_gateway }}" == "true" ]; then
          deploy_service gateway-service gateway-task ${{ secrets.ECR_REGISTRY }}/api-gateway:${{ env.COMMIT_SHORT_SHA }} api-gateway-task-def.json
        fi
        if [ "${{ inputs.deploy_customers }}" == "true" ]; then
          deploy_service customers-service customers-task ${{ secrets.ECR_REGISTRY }}/customers-service:${{ env.COMMIT_SHORT_SHA }} customers-service-task-def.json
        fi
        if [ "${{ inputs.deploy_vets }}" == "true" ]; then
          deploy_service vets-service vets-task ${{ secrets.ECR_REGISTRY }}/vets-service:${{ env.COMMIT_SHORT_SHA }} vets-service-task-def.json
        fi
        if [ "${{ inputs.deploy_visits }}" == "true" ]; then
          deploy_service visits-service visits-task ${{ secrets.ECR_REGISTRY }}/visits-service:${{ env.COMMIT_SHORT_SHA }} visits-service-task-def.json
        fi
        if [ "${{ inputs.deploy_discovery }}" == "true" ]; then
          deploy_service discovery-service discovery-task ${{ secrets.ECR_REGISTRY }}/discovery-server:${{ env.COMMIT_SHORT_SHA }} discovery-server-task-def.json
        fi
